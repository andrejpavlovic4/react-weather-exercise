{"version":3,"sources":["components/Heading/Heading.js","store/actions/actionTypes.js","store/actions/weather.js","components/TemperatureControl/TemperatureControl.js","components/BarChart/BarChart.js","components/CardSlider/Card/Card.js","components/CardSlider/CardSlider.js","components/Spinner/Spinner.js","containers/Weather/Weather.js","containers/App/App.js","registerServiceWorker.js","store/reducers/reducer.js","index.js"],"names":["heading","classes","makeStyles","root","flexGrow","textAlign","color","useStyles","className","Grid","container","spacing","item","xs","Typography","variant","SET_WEATHER_INFORMATION","SET_WEATHER_INFORMATION_START","SET_RADIO_SELECTED_VALUE","SET_BARCHART_VISIBILITY","initWeatherInformation","dispatch","type","actionTypes","axios","get","then","response","weatherInformation","data","catch","error","console","message","connect","state","selectedValue","onChangeRadioSelectedValue","value","weatherInformationActions","props","handleChange","event","target","margin","radioButtonCelcius","FormControlLabel","control","Radio","checked","onChange","name","label","radioButtonFahrenheit","list","marginBottom","measurementInfo","filter","element","Date","dt_txt","toLocaleString","month","day","map","push","temp","main","hour","justify","valueField","argumentField","showBarChart","id","setBarChartVisibility","card","barChart","media","height","width","maxWidth","marginTop","backgroundColor","boxShadow","border","typography","items","Card","onClick","CardActionArea","CardMedia","image","icon","alt","title","CardContent","gutterBottom","component","toFixed","BarChart","weather","indexGroup","simplifiedWeatherObject","relevantWeatherData","sum","average","dayCounter","dayData","i","length","currentDay","currentDayTime","dt","dayTime","n","weatherData","countList","reduce","p","c","Object","keys","key","splice","group","Math","round","autoPlay","animation","duration","navButtonsAlwaysVisible","indicators","cycleNavigation","navButtonsWrapperProps","style","top","fullHeightHover","timeout","navButtonsProps","marginRight","marginLeft","acc","x","idx","floor","index","theme","display","position","left","transform","spinner","CircularProgress","size","Weather","this","onInitWeatherInformation","loading","Spinner","Heading","TemperatureControl","CardSlider","Component","showBarchart","App","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","initialState","city","toggledArray","reducer","action","toggledCardById","clickedArray","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f54b6ce3.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst heading = () => {\n  const useStyles = makeStyles(() => ({\n    root: {\n      flexGrow: 1,\n      textAlign: \"center\",\n      color: \"#fff\",\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Typography variant=\"h2\">Weather Forecast Munich</Typography>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default heading;\n","export const SET_WEATHER_INFORMATION = 'SET_WEATHER_INFORMATION';\r\nexport const SET_WEATHER_INFORMATION_START = 'SET_WEATHER_INFORMATION_START';\r\nexport const SET_RADIO_SELECTED_VALUE = 'SET_RADIO_SELECTED_VALUE';\r\nexport const SET_BARCHART_VISIBILITY = 'SET_BARCHART_VISIBILITY';","import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const setRadioSelectedValue = (value) => {\n  return {\n    type: actionTypes.SET_RADIO_SELECTED_VALUE,\n    value: value\n  };\n};\n\nexport const setBarchartVisibility = (id, day, showBarChart) => {\n  return {\n    type: actionTypes.SET_BARCHART_VISIBILITY,\n    id: id,\n    day: day,\n    showBarChart: showBarChart\n  };\n};\n\nexport const setWeatherInformation = (weatherInformation) => {\n  return {\n    type: actionTypes.SET_WEATHER_INFORMATION,\n    weatherInformation: weatherInformation,\n  };\n};\n\nexport const setWeatherInformationStart = () => {\n  return {\n    type: actionTypes.SET_WEATHER_INFORMATION_START,\n  };\n};\n\nexport const initWeatherInformation = () => {\n  return (dispatch) => {\n    dispatch(setWeatherInformationStart());\n    axios\n      .get(\n        \"https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=62b4b957dbc74ac2867536beec3ad9de&cnt=40&units=metric\"\n      )\n      .then((response) => {\n        dispatch(setWeatherInformation(response.data));\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  };\n};\n","import React from \"react\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { connect } from 'react-redux'\nimport * as weatherInformationActions from \"../../store/actions/index\";\n\nconst temperatureControl = (props) => {\n\n  /**\n   * Sets the selected Radio Value from Redux\n   * @param event\n   */\n  const handleChange = (event) => {\n    const value = event.target.value;\n    props.onChangeRadioSelectedValue(value);\n  };\n\n  const useStyles = makeStyles(() => ({\n    root: {\n      flexGrow: 1,\n      textAlign: \"center\",\n      margin: \"60px 0\",\n      color: \"#fff\",\n    },\n  }));\n\n  const classes = useStyles();\n\n  const radioButtonCelcius = (\n    <div>\n      <FormControlLabel\n        value=\"female\"\n        control={\n          <Radio\n            checked={props.selectedValue === \"celcius\"}\n            onChange={handleChange}\n            value=\"celcius\"\n            name=\"radio-button-celcius\"\n            color={\"secondary\"}\n          />\n        }\n        label=\"Celcius\"\n      />\n    </div>\n  );\n\n  const radioButtonFahrenheit = (\n    <div>\n      <FormControlLabel\n        value=\"female\"\n        control={\n          <Radio\n            checked={props.selectedValue === \"fahrenheit\"}\n            onChange={handleChange}\n            value=\"fahrenheit\"\n            name=\"radio-button-fahrenheit\"\n            color={\"secondary\"}\n          />\n        }\n        label=\"Fahrenheit\"\n      />\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={6}>\n          {radioButtonCelcius}\n        </Grid>\n        <Grid item xs={6}>\n          {radioButtonFahrenheit}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\n/**\n * Connecting Redux for receiving state\n * @param state\n * @returns {{selectedValue: (string|*)}}\n */\nconst mapStateToProps = (state) => {\n  return {\n    selectedValue: state.selectedValue,\n  };\n};\n\n/**\n * Including Redux for dispatching Actions\n * @param dispatch\n * @returns {{onChangeRadioSelectedValue: (function(*=): *)}}\n */\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onChangeRadioSelectedValue: (value) =>\n      dispatch(weatherInformationActions.setRadioSelectedValue(value)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(temperatureControl);\n","import React from \"react\";\nimport {\n  Chart,\n  BarSeries,\n  ArgumentAxis,\n  ValueAxis,\n} from \"@devexpress/dx-react-chart-material-ui\";\nimport { connect } from \"react-redux\";\nimport { EventTracker, HoverState } from \"@devexpress/dx-react-chart\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst barChart = (props) => {\n  const useStyles = makeStyles(() => ({\n    root: {\n      flexGrow: 1,\n      marginBottom: 30,\n    },\n  }));\n\n  const classes = useStyles();\n  const measurementInfo = [];\n\n  /**\n   * Filter the Weather Information and retrieving only those for the relevant day\n   */\n  const days = props.weatherInformation.filter(element => new Date(element.dt_txt).toLocaleString(\n    \"en-US\",\n    {\n      month: \"long\",\n      day: \"numeric\",\n    }\n  ) === props.day);\n\n  /**\n   * Creates a new Object with only temperatures and time stamps during the day\n   */\n  days.map((element) => {\n    measurementInfo.push({\n      temp: props.selectedValue === \"celcius\" ? (element.main.temp) : (element.main.temp * 1.8 + 32),\n      hour: new Date(element.dt_txt).toLocaleString(\n        \"en-US\",\n        {\n          hour: \"numeric\"\n        })\n    });\n    return element;\n  });\n\n  return (\n    <Grid\n      justify={\"center\"}\n      container\n      spacing={8}\n      className={classes.root}\n    >\n      <Grid item xs={6}>\n        <Chart data={measurementInfo} color=\"#fff\">\n          <ArgumentAxis/>\n          <ValueAxis/>\n            <BarSeries color=\"#fff\" valueField=\"temp\" argumentField=\"hour\"/>\n            <EventTracker />\n            <HoverState />\n        </Chart>\n      </Grid>\n    </Grid>\n  );\n};\n\n/**\n * Connect with Redux for state receiving\n * @param state\n * @returns {{weatherInformation: (string|string|HTMLElement|*)}}\n */\nconst mapStateToProps = (state) => {\n  return {\n    weatherInformation: state.weatherInformation.list,\n    selectedValue: state.selectedValue\n  };\n};\n\nexport default connect(mapStateToProps)(barChart);\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport BarChart from \"../../BarChart/BarChart\";\nimport { connect } from \"react-redux\";\nimport * as weatherInformationActions from \"../../../store/actions\";\n\nconst card = (props) => {\n\n  /**\n   * Toggles Barchart onClick\n   * @param id\n   * @param day\n   */\n  const toggleBarChart = (id, day) => {\n    props.setBarChartVisibility(id, day, props.showBarChart);\n  };\n\n  const useStyles = makeStyles(() => ({\n    root: {\n      flexGrow: 1,\n      marginBottom: 30,\n    },\n    media: {\n      height: 180,\n      width: 250,\n    },\n    card: {\n      maxWidth: 345,\n      marginTop: 200,\n      backgroundColor: \"transparent\",\n      color: \"#fff\",\n      boxShadow: \"0 10px 20px rgba(0, 0, 0, .3)\",\n      border: \"1px solid rgba(255, 255, 255, .2)\",\n    },\n    typography: {\n      textAlign: \"center\",\n    },\n  }));\n\n  const classes = useStyles();\n  const items = [];\n  let card;\n\n  card = (\n    <Grid\n      container\n      justify=\"center\"\n      spacing={8}\n      className={classes.root}\n      key=\"1\"\n    >\n      {props.item.map((value) => (\n        <Grid item key={value.id}>\n          <Card\n            onClick={() => toggleBarChart(value.id, value.day)}\n            className={classes.card}\n            key={value.id}\n          >\n            <CardActionArea key={value.id}>\n              <CardMedia\n                className={classes.media}\n                image={`https://openweathermap.org/img/wn/${value.icon}@4x.png`}\n                alt={\"OpenWeather Icon\"}\n                title=\"Contemplative Reptile\"\n              />\n              <CardContent key={value.id}>\n                <Typography\n                  className={classes.typography}\n                  gutterBottom\n                  variant=\"h5\"\n                  component=\"h2\"\n                >\n                  {`${value.day}`}\n                </Typography>\n                <Typography\n                  className={classes.typography}\n                  gutterBottom\n                  variant=\"h5\"\n                  component=\"h2\"\n                >\n                  {`Average: ${\n                    props.selectedValue === \"celcius\"\n                      ? value.temp + \" °C\"\n                      : (value.temp * 1.8 + 32).toFixed(1) + \" °F\"\n                  }`}\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n  items.push(card);\n\n  // Rendering of the Barchart and sending the day of the clicked Card\n  let barChart;\n  if (props.showBarChart) {\n    barChart = <BarChart day={props.day} />;\n  }\n\n  return (\n    <div>\n      {items}\n      {barChart}\n    </div>\n  );\n};\n\n/**\n * Connect with Redux for state receiving\n * @param state\n * @returns {{showBarChart: (boolean|*), selectedValue: (string|*)}}\n */\nconst mapStateToProps = (state) => {\n  return {\n    selectedValue: state.selectedValue,\n    showBarChart: state.showBarChart,\n    id: state.id,\n    day: state.day\n  };\n};\n\n/**\n * Connect with Redux for dispatching actions\n * @param dispatch\n * @returns {{setBarChartVisibility: (function(): *)}}\n */\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setBarChartVisibility: (id, day, showBarChart) =>\n      dispatch(\n        weatherInformationActions.setBarchartVisibility(id, day, showBarChart)\n      ),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(card);\n","import React from \"react\";\n\nimport Carousel from \"react-material-ui-carousel\";\nimport Card from \"./Card/Card\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { connect } from \"react-redux\";\n\nconst cardSlider = (props) => {\n  /**\n   *\n   * @param items\n   * @param n\n   *\n   * Grouping items into n equal distributed arrays\n   *\n   */\n  const group = (items, n) =>\n    items.reduce((acc, x, i) => {\n      const idx = Math.floor(i / n);\n      acc[idx] = [...(acc[idx] || []), x];\n      return acc;\n    }, []);\n\n  const weatherInformation = props.weatherInformation;\n  const simplifiedWeatherObject = [];\n  const relevantWeatherData = [];\n  let sum = 0;\n  let average = 0;\n  let indexGroup;\n  const dayCounter = [];\n  const dayData = [];\n\n  /**\n   * Creates object with only the days and temperatures\n   */\n  for (let i = 0; i < weatherInformation.length; i++) {\n    const currentDay = new Date(weatherInformation[i].dt_txt).toLocaleString(\n      \"en-US\",\n      {\n        month: \"long\",\n        day: \"numeric\",\n      }\n    );\n\n    const currentDayTime = new Date(weatherInformation[i].dt_txt).toLocaleString(\n      \"en-US\",\n      {\n        hour: \"numeric\"\n      }\n    );\n\n    simplifiedWeatherObject.push({\n      id: weatherInformation[i].dt,\n      day: currentDay,\n      temp: weatherInformation[i].main.temp,\n      icon: weatherInformation[i].weather[0].icon,\n      dayTime: currentDayTime\n    });\n  }\n\n  const weatherData = [...simplifiedWeatherObject];\n\n  /**\n   * Creates an object with day counts (ex. \"April 15\": 2)\n   */\n  const countList = weatherData.reduce(function (p, c) {\n    p[c.day] = (p[c.day] || 0) + 1;\n    return p;\n  }, {});\n\n  /**\n   * Converts above object to array, so we can map through it\n   */\n  Object.keys(countList).map((key) => dayCounter.push(countList[key]));\n\n  /**\n   * Create array of objects with individual data (like days and temperatures)\n   */\n  dayCounter.map((element) => {\n    return dayData.push(weatherData.splice(0, element));\n  });\n\n  /**\n   * Groups simplified weather object and creates final object with only the relevant\n   * data (average temperature of one day and the day name in the format: mm-dd)\n   */\n  dayData.map((group) => {\n    group.map((element, i) => {\n      indexGroup = i;\n      sum += element.temp;\n      return sum;\n    });\n    average = sum / group.length;\n\n    relevantWeatherData.push({\n      id: group[indexGroup].id,\n      day: group[0].day,\n      temp: Math.round(average),\n      icon: group[indexGroup].icon,\n      dayTime: group[indexGroup].dayTime\n    });\n    sum = 0;\n    return average;\n  });\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <Carousel\n          autoPlay={false}\n          animation=\"slide\"\n          duration={\"500\"}\n          navButtonsAlwaysVisible={true}\n          indicators={false}\n          cycleNavigation={false}\n          navButtonsWrapperProps={{ style: { top: 0, height: \"10%\" } }}\n          fullHeightHover={false}\n          timeout={500}\n          navButtonsProps={{\n            style: {\n              marginRight: \"20vw\",\n              marginLeft: \"20vw\",\n            },\n          }}\n        >\n          {group(relevantWeatherData, 3).map((item, index) => {\n            return <Card item={item} key={index} data={relevantWeatherData}/>;\n          })}\n        </Carousel>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    weather: state.weatherInformation,\n    weatherInformation: state.weatherInformation.list,\n  };\n};\n\nexport default connect(mapStateToProps)(cardSlider);\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)'\r\n  },\r\n}));\r\n\r\nconst spinner = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress size={100} color={'secondary'}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default spinner;","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Heading from \"../../components/Heading/Heading\";\nimport TemperatureControl from \"../../components/TemperatureControl/TemperatureControl\";\nimport CardSlider from \"../../components/CardSlider/CardSlider\";\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport * as weatherInformationActions from \"../../store/actions/index\";\n\nexport class Weather extends Component {\n  /**\n   * Get our Weather data from OpenWeatherMap API\n   */\n  componentDidMount() {\n    this.props.onInitWeatherInformation();\n  }\n\n  render() {\n    let weather;\n\n    if (!this.props.loading) {\n      weather = (\n        <Fragment>\n          <Heading />\n          <TemperatureControl />\n          <CardSlider />\n        </Fragment>\n      );\n    } else {\n      weather = <Spinner />;\n    }\n\n    return <Fragment>{weather}</Fragment>;\n  }\n}\n\n/**\n * Connect to Redux for state receiving\n * @param state\n * @returns {{weatherInformation: (null|*), loading: (boolean|\"eager\"|\"lazy\"|string|*)}}\n */\nconst mapStateToProps = (state) => {\n  return {\n    weatherInformation: state.weatherInformation,\n    loading: state.loading,\n    showBarchart: state.showBarchart,\n  };\n};\n\n/**\n * Connect to Redux for dispatching actions\n * @param dispatch\n * @returns {{onInitWeatherInformation: (function(): *)}}\n */\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onInitWeatherInformation: () =>\n      dispatch(weatherInformationActions.initWeatherInformation()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);\n","import React, { Component } from \"react\";\n\nimport Weather from \"../Weather/Weather\";\n\nclass App extends Component {\n  style = {\n    backgroundImage: \"url(/background-image.jpg)\",\n    height: \"100%\",\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\"\n  };\n\n  render() {\n    return (\n      <div style={this.style}>\n        <Weather />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  loading: true,\n  weatherInformation: null,\n  city: null,\n  selectedValue: \"celcius\",\n  showBarChart: false,\n  toggledArray: [],\n  id: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_WEATHER_INFORMATION:\n      return {\n        ...state,\n        weatherInformation: action.weatherInformation,\n        city: action.weatherInformation.city.name,\n        loading: false,\n      };\n    case actionTypes.SET_WEATHER_INFORMATION_START:\n      return {\n        ...state,\n      };\n    case actionTypes.SET_BARCHART_VISIBILITY:\n\n      let showBarChart;\n\n      // Filter the id of the Card on which a click happened\n      const toggledCardById = state.weatherInformation.list\n        .filter((element) => element.dt === action.id)\n        .map((element) => element.dt);\n\n      // Copy array (immutability) and add the newest Card ID to the clicked Array (Array which holds all Card IDs)\n      const clickedArray = [...state.toggledArray];\n      clickedArray.push(...toggledCardById);\n\n      // Toggle the Barchart on a Card that was clicked on so that the card that is clicked\n      // next doesn't result in a UN-toggling manner.\n      showBarChart =\n        (action.id === state.toggledArray[state.toggledArray.length - 1]) && action.showBarChart === !showBarChart;\n\n      return {\n        ...state,\n        showBarChart: !showBarChart,\n        toggledArray: clickedArray,\n        id: action.id,\n        day: action.day\n      };\n    case actionTypes.SET_RADIO_SELECTED_VALUE:\n      return {\n        ...state,\n        selectedValue: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport reducer from \"./store/reducers/reducer\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}